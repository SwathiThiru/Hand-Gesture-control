Hand tracking (c#)

using Microsoft.Kinect;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace KinectHandTracking
{
    public static class Extensions
    {
        #region Camera

        public static ImageSource ToBitmap(this ColorFrame frame)
        {
            int width = frame.FrameDescription.Width;
            int height = frame.FrameDescription.Height;
            PixelFormat format = PixelFormats.Bgr32;

            byte[] pixels = new byte[width * height * ((format.BitsPerPixel + 7) / 8)];

            if (frame.RawColorImageFormat == ColorImageFormat.Bgra)
            {
                frame.CopyRawFrameDataToArray(pixels);
            }
            else
            {
                frame.CopyConvertedFrameDataToArray(pixels, ColorImageFormat.Bgra);
            }

            int stride = width * format.BitsPerPixel / 8;

            return BitmapSource.Create(width, height, 96, 96, format, null, pixels, stride);
        }

        public static ImageSource ToBitmap(this DepthFrame frame)
        {
            int width = frame.FrameDescription.Width;
            int height = frame.FrameDescription.Height;
            PixelFormat format = PixelFormats.Bgr32;

            ushort minDepth = frame.DepthMinReliableDistance;
            ushort maxDepth = frame.DepthMaxReliableDistance;

            ushort[] pixelData = new ushort[width * height];
            byte[] pixels = new byte[width * height * (format.BitsPerPixel + 7) / 8];

            frame.CopyFrameDataToArray(pixelData);

            int colorIndex = 0;
            for (int depthIndex = 0; depthIndex < pixelData.Length; ++depthIndex)
            {
                ushort depth = pixelData[depthIndex];

                byte intensity = (byte)(depth >= minDepth && depth <= maxDepth ? depth : 0);

                pixels[colorIndex++] = intensity; // Blue
                pixels[colorIndex++] = intensity; // Green
                pixels[colorIndex++] = intensity; // Red

                ++colorIndex;
            }

            int stride = width * format.BitsPerPixel / 8;

            return BitmapSource.Create(width, height, 96, 96, format, null, pixels, stride);
        }

        public static ImageSource ToBitmap(this InfraredFrame frame)
        {
            int width = frame.FrameDescription.Width;
            int height = frame.FrameDescription.Height;
            PixelFormat format = PixelFormats.Bgr32;

            ushort[] frameData = new ushort[width * height];
            byte[] pixels = new byte[width * height * (format.BitsPerPixel + 7) / 8];

            frame.CopyFrameDataToArray(frameData);

            int colorIndex = 0;
            for (int infraredIndex = 0; infraredIndex < frameData.Length; infraredIndex++)
            {
                ushort ir = frameData[infraredIndex];

                byte intensity = (byte)(ir >> 7);

                pixels[colorIndex++] = (byte)(intensity / 1); // Blue
                pixels[colorIndex++] = (byte)(intensity / 1); // Green   
                pixels[colorIndex++] = (byte)(intensity / 0.4); // Red

                colorIndex++;
            }

            int stride = width * format.BitsPerPixel / 8;

            return BitmapSource.Create(width, height, 96, 96, format, null, pixels, stride);
        }

        #endregion

        #region Body

        public static Point Scale(this Joint joint, CoordinateMapper mapper)
        {
            Point point = new Point();

            ColorSpacePoint colorPoint = mapper.MapCameraPointToColorSpace(joint.Position);
            point.X = float.IsInfinity(colorPoint.X) ? 0.0 : colorPoint.X;
            point.Y = float.IsInfinity(colorPoint.Y) ? 0.0 : colorPoint.Y;

            return point;
        }

        #endregion

        #region Drawing

        public static void DrawSkeleton(this Canvas canvas, Body body, CoordinateMapper mapper)
        {
            if (body == null) return;

            foreach (Joint joint in body.Joints.Values)
            {
                canvas.DrawPoint(joint, mapper);
            }

            canvas.DrawLine(body.Joints[JointType.Head], body.Joints[JointType.Neck], mapper);
            canvas.DrawLine(body.Joints[JointType.Neck], body.Joints[JointType.SpineShoulder], mapper);
            canvas.DrawLine(body.Joints[JointType.SpineShoulder], body.Joints[JointType.ShoulderLeft], mapper);
            canvas.DrawLine(body.Joints[JointType.SpineShoulder], body.Joints[JointType.ShoulderRight], mapper);
            canvas.DrawLine(body.Joints[JointType.SpineShoulder], body.Joints[JointType.SpineMid], mapper);
            canvas.DrawLine(body.Joints[JointType.ShoulderLeft], body.Joints[JointType.ElbowLeft], mapper);
            canvas.DrawLine(body.Joints[JointType.ShoulderRight], body.Joints[JointType.ElbowRight], mapper);
            canvas.DrawLine(body.Joints[JointType.ElbowLeft], body.Joints[JointType.WristLeft], mapper);
            canvas.DrawLine(body.Joints[JointType.ElbowRight], body.Joints[JointType.WristRight], mapper);
            canvas.DrawLine(body.Joints[JointType.WristLeft], body.Joints[JointType.HandLeft], mapper);
            canvas.DrawLine(body.Joints[JointType.WristRight], body.Joints[JointType.HandRight], mapper);
            canvas.DrawLine(body.Joints[JointType.HandLeft], body.Joints[JointType.HandTipLeft], mapper);
            canvas.DrawLine(body.Joints[JointType.HandRight], body.Joints[JointType.HandTipRight], mapper);
            canvas.DrawLine(body.Joints[JointType.HandTipLeft], body.Joints[JointType.ThumbLeft], mapper);
            canvas.DrawLine(body.Joints[JointType.HandTipRight], body.Joints[JointType.ThumbRight], mapper);
            canvas.DrawLine(body.Joints[JointType.SpineMid], body.Joints[JointType.SpineBase], mapper);
            canvas.DrawLine(body.Joints[JointType.SpineBase], body.Joints[JointType.HipLeft], mapper);
            canvas.DrawLine(body.Joints[JointType.SpineBase], body.Joints[JointType.HipRight], mapper);
            canvas.DrawLine(body.Joints[JointType.HipLeft], body.Joints[JointType.KneeLeft], mapper);
            canvas.DrawLine(body.Joints[JointType.HipRight], body.Joints[JointType.KneeRight], mapper);
            canvas.DrawLine(body.Joints[JointType.KneeLeft], body.Joints[JointType.AnkleLeft], mapper);
            canvas.DrawLine(body.Joints[JointType.KneeRight], body.Joints[JointType.AnkleRight], mapper);
            canvas.DrawLine(body.Joints[JointType.AnkleLeft], body.Joints[JointType.FootLeft], mapper);
            canvas.DrawLine(body.Joints[JointType.AnkleRight], body.Joints[JointType.FootRight], mapper);
        }

        public static void DrawPoint(this Canvas canvas, Joint joint, CoordinateMapper mapper)
        {
            if (joint.TrackingState == TrackingState.NotTracked) return;

            Point point = joint.Scale(mapper);

            Ellipse ellipse = new Ellipse
            {
                Width = 20,
                Height = 20,
                Fill = new SolidColorBrush(Colors.LightBlue)
            };

            Canvas.SetLeft(ellipse, point.X - ellipse.Width / 2);
            Canvas.SetTop(ellipse, point.Y - ellipse.Height / 2);

            canvas.Children.Add(ellipse);
        }

        public static void DrawHand(this Canvas canvas, Joint hand, CoordinateMapper mapper)
        {
            if (hand.TrackingState == TrackingState.NotTracked) return;

            Point point = hand.Scale(mapper);

            Ellipse ellipse = new Ellipse
            {
                Width = 100,
                Height = 100,
                Stroke = new SolidColorBrush(Colors.LightBlue),
                StrokeThickness = 4
            };

            Canvas.SetLeft(ellipse, point.X - ellipse.Width / 2);
            Canvas.SetTop(ellipse, point.Y - ellipse.Height / 2);

            canvas.Children.Add(ellipse);
        }

        public static void DrawThumb(this Canvas canvas, Joint thumb, CoordinateMapper mapper)
        {
            if (thumb.TrackingState == TrackingState.NotTracked) return;

            Point point = thumb.Scale(mapper);

            Ellipse ellipse = new Ellipse
            {
                Width = 40,
                Height = 40,
                Fill = new SolidColorBrush(Colors.LightBlue),
                Opacity = 0.7
            };

            Canvas.SetLeft(ellipse, point.X - ellipse.Width / 2);
            Canvas.SetTop(ellipse, point.Y - ellipse.Height / 2);

            canvas.Children.Add(ellipse);
        }

        public static void DrawLine(this Canvas canvas, Joint first, Joint second, CoordinateMapper mapper)
        {
            if (first.TrackingState == TrackingState.NotTracked || second.TrackingState == TrackingState.NotTracked) return;

            Point firstPoint = first.Scale(mapper);
            Point secondPoint = second.Scale(mapper);

            Line line = new Line
            {
                X1 = firstPoint.X,
                Y1 = firstPoint.Y,
                X2 = secondPoint.X,
                Y2 = secondPoint.Y,
                StrokeThickness = 8,
                Stroke = new SolidColorBrush(Colors.LightBlue)
            };

            canvas.Children.Add(line);
        }

        #endregion
    }
}


Drum project (processing - java )


import java.util.ArrayList;
import KinectPV2.KJoint;
import KinectPV2.*;
import ddf.minim.*;


float dotSize = 30;
// Vector to scalar ratio
float vectorScalar = 525;

// Image variable
PImage img;

KinectPV2 kinect;

Minim minim;
AudioPlayer player;

float a[]=new float[2];
float a1[]=new float[2];
float a2[]=new float[2];
float a3[]=new float[2];
int x=0,x1=0,x2=0,x3=0;
float m,n,m1,n1,m2,n2,m3,n3;
// boolean vlaues of hand on drum
boolean leftTopDrum = false;
boolean rightTopDrum = false;
boolean rightBottomDrum = false;
boolean snareDrum = false;
boolean hihatDrum = false;
boolean leftCrashDrum = false;
boolean centerCrashDrum = false;
boolean rightCrashDrum = false;
boolean kickDrum = false;

void setup() {
  size(512 ,424, P3D);

  kinect = new KinectPV2(this);

  //Enables depth and Body tracking (mask image)
  kinect.enableDepthMaskImg(true);
  kinect.enableSkeletonDepthMap(true);

  kinect.init();
  
  
  
  
  // window background color
  background(0,0,0);
  // drawer color is red
  stroke(255,0,0);
  // thickness of drawer is small
  strokeWeight(1);
  // smooth out drawer
  smooth();
  
  // load image
//  img = loadImage("drumset.png");
  // load sound player
  minim = new Minim(this);
  
}

void draw() {
 
 // background(0); 
  

  image(kinect.getDepthMaskImage(), 0, 0);

  //get the skeletons as an Arraylist of KSkeletons
  ArrayList<KSkeleton> skeletonArray =  kinect.getSkeletonDepthMap();

  //individual joints
  for (int i = 0; i < skeletonArray.size(); i++) {
    KSkeleton skeleton = (KSkeleton) skeletonArray.get(i);
    //if the skeleton is being tracked compute the skleton joints
    if (skeleton.isTracked()) {
      KJoint[] joints = skeleton.getJoints();

      color col  = skeleton.getIndexColor();
      fill(col);
      stroke(col);

      //drawBody(joints);
       //drawHandState(joints[KinectPV2.JointType_HandRight]);
       //drawHandState(joints[KinectPV2.JointType_HandLeft]);
      
       drawJoint2(joints, KinectPV2.JointType_HandRight);
       drawJoint1(joints, KinectPV2.JointType_HandLeft);
       drawJoint4(joints, KinectPV2.JointType_FootRight);
       drawJoint3(joints, KinectPV2.JointType_FootLeft);
       drawJoint(joints, KinectPV2.JointType_SpineMid);

       
       
//      kinect.run();
    line(10,10,0,50,50,0);
   leftTopDrum(joints[KinectPV2.JointType_SpineMid],joints[KinectPV2.JointType_HandRight],joints[KinectPV2.JointType_HandLeft]);
    rightTopDrum(joints[KinectPV2.JointType_SpineMid],joints[KinectPV2.JointType_HandRight],joints[KinectPV2.JointType_HandLeft]);
   rightBottomDrum(joints[KinectPV2.JointType_SpineMid],joints[KinectPV2.JointType_HandRight],joints[KinectPV2.JointType_HandLeft]);
    snareDrum(joints[KinectPV2.JointType_SpineMid],joints[KinectPV2.JointType_HandRight],joints[KinectPV2.JointType_HandLeft]);
    hihatDrum(joints[KinectPV2.JointType_SpineMid],joints[KinectPV2.JointType_HandRight],joints[KinectPV2.JointType_HandLeft]);
    leftCrashDrum(joints[KinectPV2.JointType_SpineMid],joints[KinectPV2.JointType_HandRight],joints[KinectPV2.JointType_HandLeft]);
    centerCrashDrum(joints[KinectPV2.JointType_SpineMid],joints[KinectPV2.JointType_HandRight],joints[KinectPV2.JointType_HandLeft]);
    //rightCrashDrum(joints[KinectPV2.JointType_SpineMid],joints[KinectPV2.JointType_HandRight],joints[KinectPV2.JointType_HandLeft]);
    kickDrum(joints[KinectPV2.JointType_SpineMid],joints[KinectPV2.JointType_FootRight],joints[KinectPV2.JointType_FootLeft]);
    }
  }
  
  fill(255, 0, 0);
  text(frameRate, 50, 50);
}


void drawJoint1(KJoint[] joints, int jointType) 
{
  pushMatrix();
  translate(joints[jointType].getX(), joints[jointType].getY(), joints[jointType].getZ());
  a[x]=joints[jointType].getY();
  x++;
  m=a[0];
  n=a[1];
   if(x==2)
   {
    x=0;
    m=n;
   }
 
    //println(m,n);
  noStroke();
  ellipse(0, 0, 25, 25);
  popMatrix();
}

void drawJoint2(KJoint[] joints, int jointType) 
{
  pushMatrix();
  translate(joints[jointType].getX(), joints[jointType].getY(), joints[jointType].getZ());
  a1[x1]=joints[jointType].getY();
  x1++;
  m1=a1[0];
  n1=a1[1];
   if(x1==2)
   {
    x1=0;
    m1=n1;
   }
 
  //  println(m1,n1);
  noStroke();
  ellipse(0, 0, 25, 25);
  popMatrix();
}
void drawJoint3(KJoint[] joints, int jointType) 
{
  pushMatrix();
  translate(joints[jointType].getX(), joints[jointType].getY(), joints[jointType].getZ());
  a2[x]=joints[jointType].getY();
  x2++;
  m2=a2[0];
  n2=a2[1];
   if(x2==2)
   {
    x2=0;
    m2=n2;
   }
 
    //println(m,n);
  noStroke();
  ellipse(0, 0, 25, 25);
  popMatrix();
}
void drawJoint4(KJoint[] joints, int jointType) 
{
  pushMatrix();
  translate(joints[jointType].getX(), joints[jointType].getY(), joints[jointType].getZ());
  a3[x]=joints[jointType].getY();
  x3++;
  m3=a3[0];
  n3=a3[1];
   if(x3==2)
   {
    x3=0;
    m3=n3;
   }
 
    //println(m,n);
  noStroke();
  ellipse(0, 0, 25, 25);
  popMatrix();
}
void drawJoint(KJoint[] joints, int jointType) 
{
  pushMatrix();
  translate(joints[jointType].getX(), joints[jointType].getY(), joints[jointType].getZ());
  noStroke();
  ellipse(0, 0, 25, 25);
  popMatrix();
}

/*void drawHandState(KJoint joint) {
  noStroke();
 //println(joint.getState());
  pushMatrix();
  translate(joint.getX(), joint.getY(), joint.getZ());
  //println(joint.getX());
  ellipse(0, 0, 70, 70);
  popMatrix();
}*/  
void leftTopDrum(KJoint spinejoint,KJoint rightjoint , KJoint leftjoint)
{
//  delay(1000);
  if((leftjoint.getX() > (spinejoint.getX()-120) & leftjoint.getX() < (spinejoint.getX()-40)
    &  leftjoint.getY() >(spinejoint.getY()-120)  & leftjoint.getY()<(spinejoint.getY()-40) // & leftjoint.getY()< (spinejoint.getY()-10) 
    & leftTopDrum == false &(m-n)>5) 
    | (rightjoint.getX() >  (spinejoint.getX()-120) & rightjoint.getX() <(spinejoint.getX()-40)
    & rightjoint.getY()>(spinejoint.getY()-120) & rightjoint.getY()<(spinejoint.getY()-40)
    & leftTopDrum == false &(m1-n1)>5))
    {
      // load sound
      
      player = minim.loadFile("leftTopDrum1.wav");
      // play the file
      player.play();
      leftTopDrum = true;
    }
    else
    {
      leftTopDrum = false;
    }
}// void leftTopDrum()


void rightTopDrum(KJoint spinejoint, KJoint rightjoint , KJoint leftjoint)
{
  if((leftjoint.getX() > (spinejoint.getX()+40) & leftjoint.getX() < (spinejoint.getX()+120)
    & leftjoint.getY()> (spinejoint.getY()-120) & leftjoint.getY() < (spinejoint.getY()-40)
    & rightTopDrum == false &(m-n)>5) 
    | (rightjoint.getX() > (spinejoint.getX()+40) & rightjoint.getX() < (spinejoint.getX()+120)
    & rightjoint.getY() > (spinejoint.getY()-120) & rightjoint.getY() < (spinejoint.getY()-40)
    & rightTopDrum == false &(m1-n1)>5))
    {
      // load sound
      
      delay(100);
      player = minim.loadFile("rightTopDrum1.wav");
      // play the file
      player.play();
      rightTopDrum = true;
    }
    else
    {
      rightTopDrum = false;
    }
} // void rightTopDrum()

void rightBottomDrum(KJoint spinejoint, KJoint rightjoint , KJoint leftjoint)
{
  if((leftjoint.getX() > (spinejoint.getX()+40) & leftjoint.getX() < (spinejoint.getX()+120)
    & leftjoint.getY()> (spinejoint.getY()+40) & leftjoint.getY() < (spinejoint.getY()+120)
    & rightTopDrum == false &(m-n)>5) 
    | (rightjoint.getX() > (spinejoint.getX()+40) & rightjoint.getX() < (spinejoint.getX()+120)
    & rightjoint.getY() > (spinejoint.getY()+40) & rightjoint.getY() < (spinejoint.getY()+120)
    & rightTopDrum == false &(m1-n1)>5))
    {
      // load sound
      
      delay(100);
      player = minim.loadFile("rightBottomDrum1.wav");
      // play the file
      player.play();
      rightTopDrum = true;
    }
    else
    {
      rightTopDrum = false;
    }
}// void rightBottomDrum

void hihatDrum(KJoint spinejoint, KJoint rightjoint , KJoint leftjoint)
{
  if((leftjoint.getX() > (spinejoint.getX()-120) & leftjoint.getX() < (spinejoint.getX()-40)
    & leftjoint.getY()> (spinejoint.getY()-40) & leftjoint.getY() < (spinejoint.getY()+40)
    & rightTopDrum == false &(m-n)>5) 
    | (rightjoint.getX() > (spinejoint.getX()-120) & rightjoint.getX() < (spinejoint.getX()-40)
    & rightjoint.getY() > (spinejoint.getY()-40) & rightjoint.getY() < (spinejoint.getY()+40)
    & rightTopDrum == false &(m1-n1)>5))
    {
      // load sound
      
      delay(100);
      player = minim.loadFile("hihatDrum.wav");
      // play the file
      player.play();
      rightTopDrum = true;
    }
    else
    {
      rightTopDrum = false;
    }
}//void hihatDrum

void snareDrum(KJoint spinejoint, KJoint rightjoint , KJoint leftjoint)
{
  if((leftjoint.getX() > (spinejoint.getX()-40) & leftjoint.getX() < (spinejoint.getX()+40)
    & leftjoint.getY()> (spinejoint.getY()-40) & leftjoint.getY() < (spinejoint.getY()+40)
    & rightTopDrum == false &(m-n)>5) 
    | (rightjoint.getX() > (spinejoint.getX()-40) & rightjoint.getX() < (spinejoint.getX()+40)
    & rightjoint.getY() > (spinejoint.getY()-40) & rightjoint.getY() < (spinejoint.getY()+40)
    & rightTopDrum == false &(m1-n1)>5))
    {
      // load sound
      
      delay(100);
      player = minim.loadFile("snareDrum.wav");
      // play the file
      player.play();
      rightTopDrum = true;
    }
    else
    {
      rightTopDrum = false;
    }
}//void snareDrum

void leftCrashDrum(KJoint spinejoint, KJoint rightjoint , KJoint leftjoint)
{
  if((leftjoint.getX() > (spinejoint.getX()-40) & leftjoint.getX() < (spinejoint.getX()+40)
    & leftjoint.getY()> (spinejoint.getY()-120) & leftjoint.getY() < (spinejoint.getY()-40)
    & rightTopDrum == false &(m-n)>5) 
    | (rightjoint.getX() > (spinejoint.getX()-40) & rightjoint.getX() < (spinejoint.getX()+40)
    & rightjoint.getY() > (spinejoint.getY()-120) & rightjoint.getY() < (spinejoint.getY()-40)
    & rightTopDrum == false &(m1-n1)>5))
    {
      // load sound
      
      delay(100);
      player = minim.loadFile("leftCrashDrum1.wav");
      // play the file
      player.play();
      rightTopDrum = true;
    }
    else
    {
      rightTopDrum = false;
    }
}// void leftCrashDrum

void centerCrashDrum(KJoint spinejoint, KJoint rightjoint , KJoint leftjoint)
{
  if((leftjoint.getX() > (spinejoint.getX()+40) & leftjoint.getX() < (spinejoint.getX()+120)
    & leftjoint.getY()> (spinejoint.getY()-40) & leftjoint.getY() < (spinejoint.getY()+40)
    & rightTopDrum == false &(m-n)>5) 
    | (rightjoint.getX() > (spinejoint.getX()+40) & rightjoint.getX() < (spinejoint.getX()+120)
    & rightjoint.getY() > (spinejoint.getY()-40) & rightjoint.getY() < (spinejoint.getY()+40)
    & rightTopDrum == false &(m1-n1)>5))
    {
      // load sound
      
      delay(100);
      player = minim.loadFile("centerCrashDrum1.wav");
      // play the file
      player.play();
      rightTopDrum = true;
    }
    else
    {
      rightTopDrum = false;
    }
}// void centreCrashDrum

void kickDrum(KJoint spinejoint, KJoint rightjoint , KJoint leftjoint)
{
  if((leftjoint.getX() > (spinejoint.getX()-200) & leftjoint.getX() < (spinejoint.getX()-40)
    & leftjoint.getY()> (spinejoint.getY()+30) & leftjoint.getY() < (spinejoint.getY()+600)
    & rightTopDrum == false &(m2-n2)>2) 
    | (rightjoint.getX() > (spinejoint.getX()-200) & rightjoint.getX() < (spinejoint.getX()-40)
    & rightjoint.getY() > (spinejoint.getY()+30) & rightjoint.getY() < (spinejoint.getY()+600)
    & rightTopDrum == false &(m3-n3)>2))
    {
      // load sound
      delay(100);
      player = minim.loadFile("kickDrum.wav");
      // play the file
      player.play();
      rightTopDrum = true;
    }
    else
    {
      rightTopDrum = false;
    }
}// void kickDrum


Kinect coordinate mapping (c#)
using Microsoft.Kinect;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace KinectCoordinateMapping
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        KinectSensor _sensor;
        MultiSourceFrameReader _reader;
        IList<Body> _bodies;

        CameraMode _mode = CameraMode.Color;

        public MainWindow()
        {
            InitializeComponent();
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            _sensor = KinectSensor.GetDefault();

            if (_sensor != null)
            {
                _sensor.Open();

                _reader = _sensor.OpenMultiSourceFrameReader(FrameSourceTypes.Color | FrameSourceTypes.Depth | FrameSourceTypes.Infrared | FrameSourceTypes.Body);
                _reader.MultiSourceFrameArrived += Reader_MultiSourceFrameArrived;
            }
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            if (_reader != null)
            {
                _reader.Dispose();
            }

            if (_sensor != null)
            {
                _sensor.Close();
            }
        }

        void Reader_MultiSourceFrameArrived(object sender, MultiSourceFrameArrivedEventArgs e)
        {
            var reference = e.FrameReference.AcquireFrame();

            // Color
            using (var frame = reference.ColorFrameReference.AcquireFrame())
            {
                if (frame != null)
                {
                    if (_mode == CameraMode.Color)
                    {
                        camera.Source = frame.ToBitmap();
                    }
                }
            }

            // Depth
            using (var frame = reference.DepthFrameReference.AcquireFrame())
            {
                if (frame != null)
                {
                    if (_mode == CameraMode.Depth)
                    {
                        camera.Source = frame.ToBitmap();
                    }
                }
            }

            // Infrared
            using (var frame = reference.InfraredFrameReference.AcquireFrame())
            {
                if (frame != null)
                {
                    if (_mode == CameraMode.Infrared)
                    {
                        camera.Source = frame.ToBitmap();
                    }
                }
            }

            // Body
            using (var frame = reference.BodyFrameReference.AcquireFrame())
            {
                if (frame != null)
                {
                    canvas.Children.Clear();

                    _bodies = new Body[frame.BodyFrameSource.BodyCount];

                    frame.GetAndRefreshBodyData(_bodies);

                    foreach (var body in _bodies)
                    {
                        if (body.IsTracked)
                        {
                            // COORDINATE MAPPING
                            foreach (Joint joint in body.Joints.Values)
                            {
                                if (joint.TrackingState == TrackingState.Tracked)
                                {
                                    // 3D space point
                                    CameraSpacePoint jointPosition = joint.Position;

                                    // 2D space point
                                    Point point = new Point();

                                    if (_mode == CameraMode.Color)
                                    {
                                        ColorSpacePoint colorPoint = _sensor.CoordinateMapper.MapCameraPointToColorSpace(jointPosition);

                                        point.X = float.IsInfinity(colorPoint.X) ? 0 : colorPoint.X;
                                        point.Y = float.IsInfinity(colorPoint.Y) ? 0 : colorPoint.Y;
                                    }
                                    else if (_mode == CameraMode.Depth || _mode == CameraMode.Infrared) // Change the Image and Canvas dimensions to 512x424
                                    {
                                        DepthSpacePoint depthPoint = _sensor.CoordinateMapper.MapCameraPointToDepthSpace(jointPosition);

                                        point.X = float.IsInfinity(depthPoint.X) ? 0 : depthPoint.X;
                                        point.Y = float.IsInfinity(depthPoint.Y) ? 0 : depthPoint.Y;
                                    }

                                    // Draw
                                    Ellipse ellipse = new Ellipse
                                    {
                                        Fill = Brushes.Red,
                                        Width = 30,
                                        Height = 30
                                    };

                                    Canvas.SetLeft(ellipse, point.X - ellipse.Width / 2);
                                    Canvas.SetTop(ellipse, point.Y - ellipse.Height / 2);

                                    canvas.Children.Add(ellipse);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    enum CameraMode
    {
        Color,
        Depth,
        Infrared
    }
}
